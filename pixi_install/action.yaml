name: Pixi Install
description: Setup Pixi environment
inputs:
  environments:
    description: environments to install
    required: true
  download-data:
    description: download data
    required: false
    default: true
  pixi-version:
    description: The version of pixi to use
    required: false
  pixi-manifest-path:
    description: The path to the pixi manifest file
    required: false
  environment_variables:
    description: Whether to add global environment variables
    required: false
    default: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: "100"
    - name: Fetching tags
      shell: bash -el {0}
      run: |
        echo "::group::Fetching tags"
        git fetch --prune --tags -f
        echo "::endgroup::"
    - name: Setting environment variables
      if: ${{ inputs.environment_variables == 'true' }}
      shell: bash -el {0}
      run: |
        # Set number of threads to 1 to avoid multiprocessing issues
        # This is really conservative, but it is better to
        # do it this way because it is pain to debug.
        echo "OMP_NUM_THREADS=1" >> $GITHUB_ENV
        echo "OPENBLAS_NUM_THREADS=1" >> $GITHUB_ENV
        echo "MKL_NUM_THREADS=1" >> $GITHUB_ENV
        echo "VECLIB_MAXIMUM_THREADS=1" >> $GITHUB_ENV
        echo "NUMEXPR_NUM_THREADS=1" >> $GITHUB_ENV
        # This is to avoid warnings for debugpy on newer versions of Python
        echo "PYDEVD_DISABLE_FILE_VALIDATION=1" >> $GITHUB_ENV
    - uses: actions/download-artifact@v4
      continue-on-error: true  # No artifact from pixi_lock action
      with:
        name: pixi-lock
        path: .
    - uses: prefix-dev/setup-pixi@v0.5.1
      with:
        pixi-version: ${{ inputs.pixi-version }}
        manifest-path: ${{ inputs.pixi-manifest-path }}
        environments: ${{ inputs.environments }}
        cache: false  # Cache is slower than downloading!
    - name: Install step
      shell: bash -el {0}
      run: |
        echo "::group::Install"
        pixi run -e ${{ inputs.environments }} install || echo "No install task"
        echo "::endgroup::"

    - name: Download data
      if: ${{ inputs.download-data == 'true' }}
      shell: bash -el {0}
      run: |
        echo "::group::Download data"
        # INFO: Does not really work with environments as it can be multiple but good enough
        pixi run -e ${{ inputs.environments }} download-data || echo "No download-data task"
        echo "::endgroup::"
