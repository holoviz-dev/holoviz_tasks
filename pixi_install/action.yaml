name: Pixi Install
description: Setup Pixi environment
inputs:
  environments:
    description: environments to install
    required: true
  install:
    description: If the action should run `pixi run install`
    required: false
    default: true
  download-data:
    description: If the action should run `pixi run download-data`
    required: false
    default: true
  pixi-version:
    description: The version of pixi to use
    required: false
  pixi-manifest-path:
    description: The path to the pixi manifest file
    required: false
  pixi-activate-environment:
    description: |
      If the installed environment should be "activated" for the current job, modifying `$GITHUB_ENV` and
      `$GITHUB_PATH`. If more than one environment is specified in `environments`, this must be the name of the
      environment. Defaults to `false`. Requires at least pixi v0.21.0.
    required: false
  environment_variables:
    description: Whether to add global environment variables
    required: false
    default: true
  opengl:
    description: Whether to install openGL
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: "100"
    - name: Fetching tags
      shell: bash -el {0}
      run: |
        echo "::group::Fetching tags"
        git fetch --prune --tags -f
        echo "::endgroup::"
    - name: Setting environment variables
      if: ${{ inputs.environment_variables == 'true' }}
      shell: bash -el {0}
      run: |
        # Set environment variables
        # Set number of threads to 1 to avoid multiprocessing issues
        # This is really conservative, but it is better to
        # do it this way because it is pain to debug.
        echo "OMP_NUM_THREADS=1" >> $GITHUB_ENV
        echo "OPENBLAS_NUM_THREADS=1" >> $GITHUB_ENV
        echo "MKL_NUM_THREADS=1" >> $GITHUB_ENV
        echo "VECLIB_MAXIMUM_THREADS=1" >> $GITHUB_ENV
        echo "NUMEXPR_NUM_THREADS=1" >> $GITHUB_ENV
        # This is to avoid warnings for debugpy on newer versions of Python
        echo "PYDEVD_DISABLE_FILE_VALIDATION=1" >> $GITHUB_ENV
    - name: OpenGL (Windows)
      if: inputs.opengl == 'true' && runner.os == 'Windows'
      shell: pwsh
      run: |
        echo "::group::Install OpenGL"
        powershell ${{ github.action_path }}/install_opengl.ps1
        echo "::endgroup::"
    - name: OpenGL (Linux)
      if: inputs.opengl == 'true' && runner.os == 'Linux'
      shell: bash -el {0}
      run: |
        echo "::group::Install OpenGL"
        sudo apt-get install libglu1-mesa
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x24
        sleep 3
        echo "::endgroup::"
    - uses: actions/download-artifact@v4
      continue-on-error: true  # No artifact from pixi_lock action
      with:
        name: pixi-lock
        path: .
    - uses: prefix-dev/setup-pixi@v0.8.0
      with:
        pixi-version: ${{ inputs.pixi-version }}
        manifest-path: ${{ inputs.pixi-manifest-path }}
        environments: ${{ inputs.environments }}
        activate-environment: ${{ inputs.pixi-activate-environment }}
        cache: false  # Cache is slower than downloading!
    - name: Install step
      if: ${{ inputs.install == 'true' }}
      shell: bash -el {0}
      run: |
        echo "::group::Install"
        pixi run -e ${{ inputs.environments }} install -v
        echo "::endgroup::"
    - name: Download data
      if: ${{ inputs.download-data == 'true' }}
      shell: bash -el {0}
      run: |
        echo "::group::Download data"
        # INFO: Does not really work with environments as it can be multiple but good enough
        if pixi task list -e ${{ inputs.environments }} 2>&1 | grep "download-data"; then
          pixi run -e ${{ inputs.environments }} download-data
        fi
        echo "::endgroup::"
